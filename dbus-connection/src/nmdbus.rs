// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

#![allow(dead_code)]
use dbus as dbus;
use dbus::arg;
use dbus::tree;

pub trait OrgFreedesktopNetworkManagerSettings {
    type Err;
    fn list_connections(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err>;
    fn get_connection_by_uuid(&self, uuid: &str) -> Result<dbus::Path<'static>, Self::Err>;
    fn add_connection(&self, connection: ::std::collections::HashMap<&str, ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>>) -> Result<dbus::Path<'static>, Self::Err>;
    fn add_connection_unsaved(&self, connection: ::std::collections::HashMap<&str, ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>>) -> Result<dbus::Path<'static>, Self::Err>;
    fn load_connections(&self, filenames: Vec<&str>) -> Result<(bool, Vec<String>), Self::Err>;
    fn reload_connections(&self) -> Result<bool, Self::Err>;
    fn save_hostname(&self, hostname: &str) -> Result<(), Self::Err>;
    fn get_connections(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err>;
    fn get_hostname(&self) -> Result<String, Self::Err>;
    fn get_can_modify(&self) -> Result<bool, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopNetworkManagerSettings for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn list_connections(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"ListConnections".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let connections: Vec<dbus::Path<'static>> = try!(i.read());
        Ok(connections)
    }

    fn get_connection_by_uuid(&self, uuid: &str) -> Result<dbus::Path<'static>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"GetConnectionByUuid".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(uuid);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let connection: dbus::Path<'static> = try!(i.read());
        Ok(connection)
    }

    fn add_connection(&self, connection: ::std::collections::HashMap<&str, ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>>) -> Result<dbus::Path<'static>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"AddConnection".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(connection);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let path: dbus::Path<'static> = try!(i.read());
        Ok(path)
    }

    fn add_connection_unsaved(&self, connection: ::std::collections::HashMap<&str, ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>>) -> Result<dbus::Path<'static>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"AddConnectionUnsaved".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(connection);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let path: dbus::Path<'static> = try!(i.read());
        Ok(path)
    }

    fn load_connections(&self, filenames: Vec<&str>) -> Result<(bool, Vec<String>), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"LoadConnections".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(filenames);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let status: bool = try!(i.read());
        let failures: Vec<String> = try!(i.read());
        Ok((status, failures))
    }

    fn reload_connections(&self) -> Result<bool, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"ReloadConnections".into(), |_| {
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let status: bool = try!(i.read());
        Ok(status)
    }

    fn save_hostname(&self, hostname: &str) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.freedesktop.NetworkManager.Settings".into(), &"SaveHostname".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(hostname);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn get_connections(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Settings", "Connections")
    }

    fn get_hostname(&self) -> Result<String, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Settings", "Hostname")
    }

    fn get_can_modify(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.NetworkManager.Settings", "CanModify")
    }
}

pub fn org_freedesktop_network_manager_settings_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    D::Property: Default,
    T: OrgFreedesktopNetworkManagerSettings<Err=tree::MethodErr>,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.NetworkManager.Settings", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let connections = try!(d.list_connections());
        let rm = minfo.msg.method_return();
        let rm = rm.append1(connections);
        Ok(vec!(rm))
    };
    let m = factory.method("ListConnections", Default::default(), h);
    let m = m.out_arg(("connections", "ao"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let uuid: &str = try!(i.read());
        let d = fclone(minfo);
        let connection = try!(d.get_connection_by_uuid(uuid));
        let rm = minfo.msg.method_return();
        let rm = rm.append1(connection);
        Ok(vec!(rm))
    };
    let m = factory.method("GetConnectionByUuid", Default::default(), h);
    let m = m.in_arg(("uuid", "s"));
    let m = m.out_arg(("connection", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let connection: ::std::collections::HashMap<&str, ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>> = try!(i.read());
        let d = fclone(minfo);
        let path = try!(d.add_connection(connection));
        let rm = minfo.msg.method_return();
        let rm = rm.append1(path);
        Ok(vec!(rm))
    };
    let m = factory.method("AddConnection", Default::default(), h);
    let m = m.in_arg(("connection", "a{sa{sv}}"));
    let m = m.out_arg(("path", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let connection: ::std::collections::HashMap<&str, ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>> = try!(i.read());
        let d = fclone(minfo);
        let path = try!(d.add_connection_unsaved(connection));
        let rm = minfo.msg.method_return();
        let rm = rm.append1(path);
        Ok(vec!(rm))
    };
    let m = factory.method("AddConnectionUnsaved", Default::default(), h);
    let m = m.in_arg(("connection", "a{sa{sv}}"));
    let m = m.out_arg(("path", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let filenames: Vec<&str> = try!(i.read());
        let d = fclone(minfo);
        let (status, failures) = try!(d.load_connections(filenames));
        let rm = minfo.msg.method_return();
        let rm = rm.append1(status);
        let rm = rm.append1(failures);
        Ok(vec!(rm))
    };
    let m = factory.method("LoadConnections", Default::default(), h);
    let m = m.in_arg(("filenames", "as"));
    let m = m.out_arg(("status", "b"));
    let m = m.out_arg(("failures", "as"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let status = try!(d.reload_connections());
        let rm = minfo.msg.method_return();
        let rm = rm.append1(status);
        Ok(vec!(rm))
    };
    let m = factory.method("ReloadConnections", Default::default(), h);
    let m = m.out_arg(("status", "b"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let hostname: &str = try!(i.read());
        let d = fclone(minfo);
        try!(d.save_hostname(hostname));
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("SaveHostname", Default::default(), h);
    let m = m.in_arg(("hostname", "s"));
    let i = i.add_m(m);

    let p = factory.property::<Vec<dbus::Path>, _>("Connections", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_connections()));
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<&str, _>("Hostname", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_hostname()));
        Ok(())
    });
    let i = i.add_p(p);

    let p = factory.property::<bool, _>("CanModify", Default::default());
    let p = p.access(tree::Access::Read);
    let fclone = f.clone();
    let p = p.on_get(move |a, pinfo| {
        let minfo = pinfo.to_method_info();
        let d = fclone(&minfo);
        a.append(try!(d.get_can_modify()));
        Ok(())
    });
    let i = i.add_p(p);
    i
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopNetworkManagerSettingsPropertiesChanged {
    pub properties: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg + 'static>>>,
}

impl dbus::SignalArgs for OrgFreedesktopNetworkManagerSettingsPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.properties as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.properties = try!(i.read());
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopNetworkManagerSettingsNewConnection {
    pub connection: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgFreedesktopNetworkManagerSettingsNewConnection {
    const NAME: &'static str = "NewConnection";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.connection as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.connection = try!(i.read());
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgFreedesktopNetworkManagerSettingsConnectionRemoved {
    pub connection: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgFreedesktopNetworkManagerSettingsConnectionRemoved {
    const NAME: &'static str = "ConnectionRemoved";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.connection as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.connection = try!(i.read());
        Ok(())
    }
}
