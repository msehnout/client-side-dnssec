// This file was generated by gir (https://github.com/gtk-rs/gir @ c530bb9)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use ActiveConnection;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Client(Object<ffi::NMClient, ffi::NMClientClass>);

    match fn {
        get_type => || ffi::nm_client_get_type(),
    }
}

impl Client {
    //pub fn new<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(cancellable: P, error: /*Ignored*/Option<Error>) -> Client {
    //    unsafe { TODO: call ffi::nm_client_new() }
    //}

    //pub fn new_async<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>, Q: FnOnce(Result<Client, Error>) + Send + 'static>(cancellable: P, callback: Q) {
    //    unsafe { TODO: call ffi::nm_client_new_async() }
    //}

    //#[cfg(feature = "futures")]
    //pub fn new_async_future() -> Box_<futures_core::Future<Item = Client, Error = Error>> {
        //use gio::GioFuture;
        //use send_cell::SendCell;

        //GioFuture::new(&(), move |_obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    let send = SendCell::new(send);
        //    Self::new_async(
        //         Some(&cancellable),
        //         move |res| {
        //             let _ = send.into_inner().send(res);
        //         },
        //    );

        //    cancellable
        //})
    //}
}

pub trait ClientExt {
    //fn activate_connection_async<'a, 'b, 'c, 'd, P: IsA</*Ignored*/Connection> + 'a, Q: Into<Option<&'a P>>, R: IsA</*Ignored*/Device> + 'b, S: Into<Option<&'b R>>, T: Into<Option<&'c str>>, U: Into<Option<&'d /*Ignored*/gio::Cancellable>>, V: FnOnce(Result<ActiveConnection, Error>) + Send + 'static>(&self, connection: Q, device: S, specific_object: T, cancellable: U, callback: V);

    //#[cfg(feature = "futures")]
    //fn activate_connection_async_future<'a, 'b, 'c, P: IsA</*Ignored*/Connection> + Clone + 'static, Q: Into<Option<&'a P>>, R: IsA</*Ignored*/Device> + Clone + 'static, S: Into<Option<&'b R>>, T: Into<Option<&'c str>>>(&self, connection: Q, device: S, specific_object: T) -> Box_<futures_core::Future<Item = (Self, ActiveConnection), Error = (Self, Error)>>;

    //fn add_and_activate_connection_async<'a, 'b, 'c, P: IsA</*Ignored*/Connection> + 'a, Q: Into<Option<&'a P>>, R: IsA</*Ignored*/Device>, S: Into<Option<&'b str>>, T: Into<Option<&'c /*Ignored*/gio::Cancellable>>, U: FnOnce(Result<ActiveConnection, Error>) + Send + 'static>(&self, partial: Q, device: &R, specific_object: S, cancellable: T, callback: U);

    //#[cfg(feature = "futures")]
    //fn add_and_activate_connection_async_future<'a, 'b, P: IsA</*Ignored*/Connection> + Clone + 'static, Q: Into<Option<&'a P>>, R: IsA</*Ignored*/Device> + Clone + 'static, S: Into<Option<&'b str>>>(&self, partial: Q, device: &R, specific_object: S) -> Box_<futures_core::Future<Item = (Self, ActiveConnection), Error = (Self, Error)>>;

    //fn add_connection_async<'a, P: IsA</*Ignored*/Connection>, Q: Into<Option<&'a /*Ignored*/gio::Cancellable>>, R: FnOnce(Result</*Ignored*/RemoteConnection, Error>) + Send + 'static>(&self, connection: &P, save_to_disk: bool, cancellable: Q, callback: R);

    //#[cfg(feature = "futures")]
    //fn add_connection_async_future<P: IsA</*Ignored*/Connection> + Clone + 'static>(&self, connection: &P, save_to_disk: bool) -> Box_<futures_core::Future<Item = (Self, /*Ignored*/RemoteConnection), Error = (Self, Error)>>;

    //fn check_connectivity<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, cancellable: P, error: /*Ignored*/Option<Error>) -> /*Ignored*/ConnectivityState;

    //fn check_connectivity_async<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>, Q: FnOnce(Result</*Ignored*/ConnectivityState, Error>) + Send + 'static>(&self, cancellable: P, callback: Q);

    //#[cfg(feature = "futures")]
    //fn check_connectivity_async_future(&self) -> Box_<futures_core::Future<Item = (Self, /*Ignored*/ConnectivityState), Error = (Self, Error)>>;

    //fn deactivate_connection<'a, P: IsA<ActiveConnection>, Q: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, active: &P, cancellable: Q, error: /*Ignored*/Option<Error>) -> bool;

    //fn deactivate_connection_async<'a, P: IsA<ActiveConnection>, Q: Into<Option<&'a /*Ignored*/gio::Cancellable>>, R: FnOnce(Result<(), Error>) + Send + 'static>(&self, active: &P, cancellable: Q, callback: R);

    //#[cfg(feature = "futures")]
    //fn deactivate_connection_async_future<P: IsA<ActiveConnection> + Clone + 'static>(&self, active: &P) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>>;

    fn get_activating_connection(&self) -> Option<ActiveConnection>;

    //fn get_active_connections(&self) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 9 };

    //#[cfg(any(feature = "v1_2", feature = "dox"))]
    //fn get_all_devices(&self) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 10 };

    //fn get_connection_by_id(&self, id: &str) -> /*Ignored*/Option<RemoteConnection>;

    //fn get_connection_by_path(&self, path: &str) -> /*Ignored*/Option<RemoteConnection>;

    //fn get_connection_by_uuid(&self, uuid: &str) -> /*Ignored*/Option<RemoteConnection>;

    //fn get_connections(&self) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 8 };

    //fn get_connectivity(&self) -> /*Ignored*/ConnectivityState;

    //fn get_device_by_iface(&self, iface: &str) -> /*Ignored*/Option<Device>;

    //fn get_device_by_path(&self, object_path: &str) -> /*Ignored*/Option<Device>;

    //fn get_devices(&self) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 10 };

    //#[cfg(any(feature = "v1_6", feature = "dox"))]
    //fn get_dns_configuration(&self) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 22 };

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_dns_mode(&self) -> Option<String>;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_dns_rc_manager(&self) -> Option<String>;

    //fn get_logging<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>>(&self, level: P, domains: Q, error: /*Ignored*/Option<Error>) -> bool;

    fn get_nm_running(&self) -> bool;

    //fn get_permission_result(&self, permission: /*Ignored*/ClientPermission) -> /*Ignored*/ClientPermissionResult;

    fn get_primary_connection(&self) -> Option<ActiveConnection>;

    fn get_startup(&self) -> bool;

    //fn get_state(&self) -> /*Ignored*/State;

    fn get_version(&self) -> Option<String>;

    //fn load_connections<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, filenames: &[&str], cancellable: P, error: /*Ignored*/Option<Error>) -> Result<(String), Error>;

    //fn load_connections_async<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>, Q: FnOnce(Result<Vec<String>, Error>) + Send + 'static>(&self, filenames: &[&str], cancellable: P, callback: Q);

    //#[cfg(feature = "futures")]
    //fn load_connections_async_future(&self, filenames: &[&str]) -> Box_<futures_core::Future<Item = (Self, Vec<String>), Error = (Self, Error)>>;

    fn networking_get_enabled(&self) -> bool;

    //fn networking_set_enabled(&self, enabled: bool, error: /*Ignored*/Option<Error>) -> bool;

    //fn reload_connections<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, cancellable: P, error: /*Ignored*/Option<Error>) -> bool;

    //fn reload_connections_async<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>, Q: FnOnce(Result<(), Error>) + Send + 'static>(&self, cancellable: P, callback: Q);

    //#[cfg(feature = "futures")]
    //fn reload_connections_async_future(&self) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>>;

    //fn save_hostname<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/gio::Cancellable>>>(&self, hostname: P, cancellable: Q, error: /*Ignored*/Option<Error>) -> bool;

    //fn save_hostname_async<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/gio::Cancellable>>, R: FnOnce(Result<(), Error>) + Send + 'static>(&self, hostname: P, cancellable: Q, callback: R);

    //#[cfg(feature = "futures")]
    //fn save_hostname_async_future<'a, P: Into<Option<&'a str>>>(&self, hostname: P) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>>;

    //fn set_logging<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>>(&self, level: P, domains: Q, error: /*Ignored*/Option<Error>) -> bool;

    fn wimax_get_enabled(&self) -> bool;

    fn wimax_hardware_get_enabled(&self) -> bool;

    fn wimax_set_enabled(&self, enabled: bool);

    fn wireless_get_enabled(&self) -> bool;

    fn wireless_hardware_get_enabled(&self) -> bool;

    fn wireless_set_enabled(&self, enabled: bool);

    fn wwan_get_enabled(&self) -> bool;

    fn wwan_hardware_get_enabled(&self) -> bool;

    fn wwan_set_enabled(&self, enabled: bool);

    fn get_property_can_modify(&self) -> bool;

    fn get_property_hostname(&self) -> Option<String>;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_property_metered(&self) -> u32;

    fn get_property_networking_enabled(&self) -> bool;

    fn set_property_networking_enabled(&self, networking_enabled: bool);

    fn get_property_wimax_enabled(&self) -> bool;

    fn set_property_wimax_enabled(&self, wimax_enabled: bool);

    fn get_property_wimax_hardware_enabled(&self) -> bool;

    fn get_property_wireless_enabled(&self) -> bool;

    fn set_property_wireless_enabled(&self, wireless_enabled: bool);

    fn get_property_wireless_hardware_enabled(&self) -> bool;

    fn get_property_wwan_enabled(&self) -> bool;

    fn set_property_wwan_enabled(&self, wwan_enabled: bool);

    fn get_property_wwan_hardware_enabled(&self) -> bool;

    fn connect_active_connection_added<F: Fn(&Self, &ActiveConnection) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_active_connection_removed<F: Fn(&Self, &ActiveConnection) + 'static>(&self, f: F) -> SignalHandlerId;

    //fn connect_any_device_added<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_any_device_removed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_connection_added<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_connection_removed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_device_added<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    //fn connect_device_removed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    fn connect_permission_changed<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_activating_connection_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_active_connections_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_all_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_can_modify_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_connections_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_connectivity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_dns_configuration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_dns_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_dns_rc_manager_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_hostname_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_metered_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_networking_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_nm_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_primary_connection_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_startup_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_wimax_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_wimax_hardware_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_wireless_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_wireless_hardware_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_wwan_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_wwan_hardware_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Client> + IsA<glib::object::Object>> ClientExt for O {
    //fn activate_connection_async<'a, 'b, 'c, 'd, P: IsA</*Ignored*/Connection> + 'a, Q: Into<Option<&'a P>>, R: IsA</*Ignored*/Device> + 'b, S: Into<Option<&'b R>>, T: Into<Option<&'c str>>, U: Into<Option<&'d /*Ignored*/gio::Cancellable>>, V: FnOnce(Result<ActiveConnection, Error>) + Send + 'static>(&self, connection: Q, device: S, specific_object: T, cancellable: U, callback: V) {
    //    unsafe { TODO: call ffi::nm_client_activate_connection_async() }
    //}

    //#[cfg(feature = "futures")]
    //fn activate_connection_async_future<'a, 'b, 'c, P: IsA</*Ignored*/Connection> + Clone + 'static, Q: Into<Option<&'a P>>, R: IsA</*Ignored*/Device> + Clone + 'static, S: Into<Option<&'b R>>, T: Into<Option<&'c str>>>(&self, connection: Q, device: S, specific_object: T) -> Box_<futures_core::Future<Item = (Self, ActiveConnection), Error = (Self, Error)>> {
        //use gio::GioFuture;
        //use send_cell::SendCell;

        //let connection = connection.into();
        //let connection = connection.map(ToOwned::to_owned);
        //let device = device.into();
        //let device = device.map(ToOwned::to_owned);
        //let specific_object = specific_object.into();
        //let specific_object = specific_object.map(ToOwned::to_owned);
        //GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    let send = SendCell::new(send);
        //    let obj_clone = SendCell::new(obj.clone());
        //    obj.activate_connection_async(
        //         connection.as_ref().map(::std::borrow::Borrow::borrow),
        //         device.as_ref().map(::std::borrow::Borrow::borrow),
        //         specific_object.as_ref().map(::std::borrow::Borrow::borrow),
        //         Some(&cancellable),
        //         move |res| {
        //             let obj = obj_clone.into_inner();
        //             let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
        //             let _ = send.into_inner().send(res);
        //         },
        //    );

        //    cancellable
        //})
    //}

    //fn add_and_activate_connection_async<'a, 'b, 'c, P: IsA</*Ignored*/Connection> + 'a, Q: Into<Option<&'a P>>, R: IsA</*Ignored*/Device>, S: Into<Option<&'b str>>, T: Into<Option<&'c /*Ignored*/gio::Cancellable>>, U: FnOnce(Result<ActiveConnection, Error>) + Send + 'static>(&self, partial: Q, device: &R, specific_object: S, cancellable: T, callback: U) {
    //    unsafe { TODO: call ffi::nm_client_add_and_activate_connection_async() }
    //}

    //#[cfg(feature = "futures")]
    //fn add_and_activate_connection_async_future<'a, 'b, P: IsA</*Ignored*/Connection> + Clone + 'static, Q: Into<Option<&'a P>>, R: IsA</*Ignored*/Device> + Clone + 'static, S: Into<Option<&'b str>>>(&self, partial: Q, device: &R, specific_object: S) -> Box_<futures_core::Future<Item = (Self, ActiveConnection), Error = (Self, Error)>> {
        //use gio::GioFuture;
        //use send_cell::SendCell;

        //let partial = partial.into();
        //let partial = partial.map(ToOwned::to_owned);
        //let device = device.clone();
        //let specific_object = specific_object.into();
        //let specific_object = specific_object.map(ToOwned::to_owned);
        //GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    let send = SendCell::new(send);
        //    let obj_clone = SendCell::new(obj.clone());
        //    obj.add_and_activate_connection_async(
        //         partial.as_ref().map(::std::borrow::Borrow::borrow),
        //         &device,
        //         specific_object.as_ref().map(::std::borrow::Borrow::borrow),
        //         Some(&cancellable),
        //         move |res| {
        //             let obj = obj_clone.into_inner();
        //             let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
        //             let _ = send.into_inner().send(res);
        //         },
        //    );

        //    cancellable
        //})
    //}

    //fn add_connection_async<'a, P: IsA</*Ignored*/Connection>, Q: Into<Option<&'a /*Ignored*/gio::Cancellable>>, R: FnOnce(Result</*Ignored*/RemoteConnection, Error>) + Send + 'static>(&self, connection: &P, save_to_disk: bool, cancellable: Q, callback: R) {
    //    unsafe { TODO: call ffi::nm_client_add_connection_async() }
    //}

    //#[cfg(feature = "futures")]
    //fn add_connection_async_future<P: IsA</*Ignored*/Connection> + Clone + 'static>(&self, connection: &P, save_to_disk: bool) -> Box_<futures_core::Future<Item = (Self, /*Ignored*/RemoteConnection), Error = (Self, Error)>> {
        //use gio::GioFuture;
        //use send_cell::SendCell;

        //let connection = connection.clone();
        //GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    let send = SendCell::new(send);
        //    let obj_clone = SendCell::new(obj.clone());
        //    obj.add_connection_async(
        //         &connection,
        //         save_to_disk,
        //         Some(&cancellable),
        //         move |res| {
        //             let obj = obj_clone.into_inner();
        //             let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
        //             let _ = send.into_inner().send(res);
        //         },
        //    );

        //    cancellable
        //})
    //}

    //fn check_connectivity<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, cancellable: P, error: /*Ignored*/Option<Error>) -> /*Ignored*/ConnectivityState {
    //    unsafe { TODO: call ffi::nm_client_check_connectivity() }
    //}

    //fn check_connectivity_async<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>, Q: FnOnce(Result</*Ignored*/ConnectivityState, Error>) + Send + 'static>(&self, cancellable: P, callback: Q) {
    //    unsafe { TODO: call ffi::nm_client_check_connectivity_async() }
    //}

    //#[cfg(feature = "futures")]
    //fn check_connectivity_async_future(&self) -> Box_<futures_core::Future<Item = (Self, /*Ignored*/ConnectivityState), Error = (Self, Error)>> {
        //use gio::GioFuture;
        //use send_cell::SendCell;

        //GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    let send = SendCell::new(send);
        //    let obj_clone = SendCell::new(obj.clone());
        //    obj.check_connectivity_async(
        //         Some(&cancellable),
        //         move |res| {
        //             let obj = obj_clone.into_inner();
        //             let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
        //             let _ = send.into_inner().send(res);
        //         },
        //    );

        //    cancellable
        //})
    //}

    //fn deactivate_connection<'a, P: IsA<ActiveConnection>, Q: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, active: &P, cancellable: Q, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::nm_client_deactivate_connection() }
    //}

    //fn deactivate_connection_async<'a, P: IsA<ActiveConnection>, Q: Into<Option<&'a /*Ignored*/gio::Cancellable>>, R: FnOnce(Result<(), Error>) + Send + 'static>(&self, active: &P, cancellable: Q, callback: R) {
    //    unsafe { TODO: call ffi::nm_client_deactivate_connection_async() }
    //}

    //#[cfg(feature = "futures")]
    //fn deactivate_connection_async_future<P: IsA<ActiveConnection> + Clone + 'static>(&self, active: &P) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>> {
        //use gio::GioFuture;
        //use send_cell::SendCell;

        //let active = active.clone();
        //GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    let send = SendCell::new(send);
        //    let obj_clone = SendCell::new(obj.clone());
        //    obj.deactivate_connection_async(
        //         &active,
        //         Some(&cancellable),
        //         move |res| {
        //             let obj = obj_clone.into_inner();
        //             let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
        //             let _ = send.into_inner().send(res);
        //         },
        //    );

        //    cancellable
        //})
    //}

    fn get_activating_connection(&self) -> Option<ActiveConnection> {
        unsafe {
            from_glib_none(ffi::nm_client_get_activating_connection(self.to_glib_none().0))
        }
    }

    //fn get_active_connections(&self) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 9 } {
    //    unsafe { TODO: call ffi::nm_client_get_active_connections() }
    //}

    //#[cfg(any(feature = "v1_2", feature = "dox"))]
    //fn get_all_devices(&self) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 10 } {
    //    unsafe { TODO: call ffi::nm_client_get_all_devices() }
    //}

    //fn get_connection_by_id(&self, id: &str) -> /*Ignored*/Option<RemoteConnection> {
    //    unsafe { TODO: call ffi::nm_client_get_connection_by_id() }
    //}

    //fn get_connection_by_path(&self, path: &str) -> /*Ignored*/Option<RemoteConnection> {
    //    unsafe { TODO: call ffi::nm_client_get_connection_by_path() }
    //}

    //fn get_connection_by_uuid(&self, uuid: &str) -> /*Ignored*/Option<RemoteConnection> {
    //    unsafe { TODO: call ffi::nm_client_get_connection_by_uuid() }
    //}

    //fn get_connections(&self) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 8 } {
    //    unsafe { TODO: call ffi::nm_client_get_connections() }
    //}

    //fn get_connectivity(&self) -> /*Ignored*/ConnectivityState {
    //    unsafe { TODO: call ffi::nm_client_get_connectivity() }
    //}

    //fn get_device_by_iface(&self, iface: &str) -> /*Ignored*/Option<Device> {
    //    unsafe { TODO: call ffi::nm_client_get_device_by_iface() }
    //}

    //fn get_device_by_path(&self, object_path: &str) -> /*Ignored*/Option<Device> {
    //    unsafe { TODO: call ffi::nm_client_get_device_by_path() }
    //}

    //fn get_devices(&self) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 10 } {
    //    unsafe { TODO: call ffi::nm_client_get_devices() }
    //}

    //#[cfg(any(feature = "v1_6", feature = "dox"))]
    //fn get_dns_configuration(&self) -> /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 1, id: 22 } {
    //    unsafe { TODO: call ffi::nm_client_get_dns_configuration() }
    //}

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_dns_mode(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_client_get_dns_mode(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn get_dns_rc_manager(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_client_get_dns_rc_manager(self.to_glib_none().0))
        }
    }

    //fn get_logging<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>>(&self, level: P, domains: Q, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::nm_client_get_logging() }
    //}

    fn get_nm_running(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_get_nm_running(self.to_glib_none().0))
        }
    }

    //fn get_permission_result(&self, permission: /*Ignored*/ClientPermission) -> /*Ignored*/ClientPermissionResult {
    //    unsafe { TODO: call ffi::nm_client_get_permission_result() }
    //}

    fn get_primary_connection(&self) -> Option<ActiveConnection> {
        unsafe {
            from_glib_none(ffi::nm_client_get_primary_connection(self.to_glib_none().0))
        }
    }

    fn get_startup(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_get_startup(self.to_glib_none().0))
        }
    }

    //fn get_state(&self) -> /*Ignored*/State {
    //    unsafe { TODO: call ffi::nm_client_get_state() }
    //}

    fn get_version(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::nm_client_get_version(self.to_glib_none().0))
        }
    }

    //fn load_connections<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, filenames: &[&str], cancellable: P, error: /*Ignored*/Option<Error>) -> Result<(String), Error> {
    //    unsafe { TODO: call ffi::nm_client_load_connections() }
    //}

    //fn load_connections_async<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>, Q: FnOnce(Result<Vec<String>, Error>) + Send + 'static>(&self, filenames: &[&str], cancellable: P, callback: Q) {
    //    unsafe { TODO: call ffi::nm_client_load_connections_async() }
    //}

    //#[cfg(feature = "futures")]
    //fn load_connections_async_future(&self, filenames: &[&str]) -> Box_<futures_core::Future<Item = (Self, Vec<String>), Error = (Self, Error)>> {
        //use gio::GioFuture;
        //use send_cell::SendCell;

        //let filenames = filenames.clone();
        //GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    let send = SendCell::new(send);
        //    let obj_clone = SendCell::new(obj.clone());
        //    obj.load_connections_async(
        //         &filenames,
        //         Some(&cancellable),
        //         move |res| {
        //             let obj = obj_clone.into_inner();
        //             let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
        //             let _ = send.into_inner().send(res);
        //         },
        //    );

        //    cancellable
        //})
    //}

    fn networking_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_networking_get_enabled(self.to_glib_none().0))
        }
    }

    //fn networking_set_enabled(&self, enabled: bool, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::nm_client_networking_set_enabled() }
    //}

    //fn reload_connections<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, cancellable: P, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::nm_client_reload_connections() }
    //}

    //fn reload_connections_async<'a, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>, Q: FnOnce(Result<(), Error>) + Send + 'static>(&self, cancellable: P, callback: Q) {
    //    unsafe { TODO: call ffi::nm_client_reload_connections_async() }
    //}

    //#[cfg(feature = "futures")]
    //fn reload_connections_async_future(&self) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>> {
        //use gio::GioFuture;
        //use send_cell::SendCell;

        //GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    let send = SendCell::new(send);
        //    let obj_clone = SendCell::new(obj.clone());
        //    obj.reload_connections_async(
        //         Some(&cancellable),
        //         move |res| {
        //             let obj = obj_clone.into_inner();
        //             let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
        //             let _ = send.into_inner().send(res);
        //         },
        //    );

        //    cancellable
        //})
    //}

    //fn save_hostname<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/gio::Cancellable>>>(&self, hostname: P, cancellable: Q, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::nm_client_save_hostname() }
    //}

    //fn save_hostname_async<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b /*Ignored*/gio::Cancellable>>, R: FnOnce(Result<(), Error>) + Send + 'static>(&self, hostname: P, cancellable: Q, callback: R) {
    //    unsafe { TODO: call ffi::nm_client_save_hostname_async() }
    //}

    //#[cfg(feature = "futures")]
    //fn save_hostname_async_future<'a, P: Into<Option<&'a str>>>(&self, hostname: P) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>> {
        //use gio::GioFuture;
        //use send_cell::SendCell;

        //let hostname = hostname.into();
        //let hostname = hostname.map(ToOwned::to_owned);
        //GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    let send = SendCell::new(send);
        //    let obj_clone = SendCell::new(obj.clone());
        //    obj.save_hostname_async(
        //         hostname.as_ref().map(::std::borrow::Borrow::borrow),
        //         Some(&cancellable),
        //         move |res| {
        //             let obj = obj_clone.into_inner();
        //             let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
        //             let _ = send.into_inner().send(res);
        //         },
        //    );

        //    cancellable
        //})
    //}

    //fn set_logging<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>>(&self, level: P, domains: Q, error: /*Ignored*/Option<Error>) -> bool {
    //    unsafe { TODO: call ffi::nm_client_set_logging() }
    //}

    fn wimax_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wimax_get_enabled(self.to_glib_none().0))
        }
    }

    fn wimax_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wimax_hardware_get_enabled(self.to_glib_none().0))
        }
    }

    fn wimax_set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::nm_client_wimax_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn wireless_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wireless_get_enabled(self.to_glib_none().0))
        }
    }

    fn wireless_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wireless_hardware_get_enabled(self.to_glib_none().0))
        }
    }

    fn wireless_set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::nm_client_wireless_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn wwan_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wwan_get_enabled(self.to_glib_none().0))
        }
    }

    fn wwan_hardware_get_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::nm_client_wwan_hardware_get_enabled(self.to_glib_none().0))
        }
    }

    fn wwan_set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::nm_client_wwan_set_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn get_property_can_modify(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "can-modify".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_hostname(&self) -> Option<String> {
        unsafe {
            let mut value = Value::from_type(<String as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "hostname".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn get_property_metered(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "metered".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_networking_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "networking-enabled".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_networking_enabled(&self, networking_enabled: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "networking-enabled".to_glib_none().0, Value::from(&networking_enabled).to_glib_none().0);
        }
    }

    fn get_property_wimax_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "wimax-enabled".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_wimax_enabled(&self, wimax_enabled: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "wimax-enabled".to_glib_none().0, Value::from(&wimax_enabled).to_glib_none().0);
        }
    }

    fn get_property_wimax_hardware_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "wimax-hardware-enabled".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_wireless_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "wireless-enabled".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_wireless_enabled(&self, wireless_enabled: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "wireless-enabled".to_glib_none().0, Value::from(&wireless_enabled).to_glib_none().0);
        }
    }

    fn get_property_wireless_hardware_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "wireless-hardware-enabled".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_wwan_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "wwan-enabled".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_wwan_enabled(&self, wwan_enabled: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "wwan-enabled".to_glib_none().0, Value::from(&wwan_enabled).to_glib_none().0);
        }
    }

    fn get_property_wwan_hardware_enabled(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "wwan-hardware-enabled".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn connect_active_connection_added<F: Fn(&Self, &ActiveConnection) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &ActiveConnection) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "active-connection-added",
                transmute(active_connection_added_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_active_connection_removed<F: Fn(&Self, &ActiveConnection) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &ActiveConnection) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "active-connection-removed",
                transmute(active_connection_removed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    //fn connect_any_device_added<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored device: NM.Device
    //}

    //fn connect_any_device_removed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored device: NM.Device
    //}

    //fn connect_connection_added<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored connection: NM.RemoteConnection
    //}

    //fn connect_connection_removed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored connection: NM.RemoteConnection
    //}

    //fn connect_device_added<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored device: NM.Device
    //}

    //fn connect_device_removed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored device: NM.Device
    //}

    fn connect_permission_changed<F: Fn(&Self, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, u32, u32) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "permission-changed",
                transmute(permission_changed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_activating_connection_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::activating-connection",
                transmute(notify_activating_connection_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_active_connections_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::active-connections",
                transmute(notify_active_connections_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_all_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::all-devices",
                transmute(notify_all_devices_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_can_modify_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::can-modify",
                transmute(notify_can_modify_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_connections_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::connections",
                transmute(notify_connections_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_connectivity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::connectivity",
                transmute(notify_connectivity_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::devices",
                transmute(notify_devices_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_dns_configuration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::dns-configuration",
                transmute(notify_dns_configuration_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_dns_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::dns-mode",
                transmute(notify_dns_mode_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v1_6", feature = "dox"))]
    fn connect_property_dns_rc_manager_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::dns-rc-manager",
                transmute(notify_dns_rc_manager_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_hostname_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::hostname",
                transmute(notify_hostname_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v1_2", feature = "dox"))]
    fn connect_property_metered_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::metered",
                transmute(notify_metered_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_networking_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::networking-enabled",
                transmute(notify_networking_enabled_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_nm_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::nm-running",
                transmute(notify_nm_running_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_primary_connection_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::primary-connection",
                transmute(notify_primary_connection_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_startup_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::startup",
                transmute(notify_startup_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::state",
                transmute(notify_state_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::version",
                transmute(notify_version_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_wimax_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::wimax-enabled",
                transmute(notify_wimax_enabled_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_wimax_hardware_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::wimax-hardware-enabled",
                transmute(notify_wimax_hardware_enabled_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_wireless_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::wireless-enabled",
                transmute(notify_wireless_enabled_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_wireless_hardware_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::wireless-hardware-enabled",
                transmute(notify_wireless_hardware_enabled_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_wwan_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::wwan-enabled",
                transmute(notify_wwan_enabled_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_wwan_hardware_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::wwan-hardware-enabled",
                transmute(notify_wwan_hardware_enabled_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn active_connection_added_trampoline<P>(this: *mut ffi::NMClient, active_connection: *mut ffi::NMActiveConnection, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P, &ActiveConnection) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(active_connection))
}

unsafe extern "C" fn active_connection_removed_trampoline<P>(this: *mut ffi::NMClient, active_connection: *mut ffi::NMActiveConnection, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P, &ActiveConnection) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(active_connection))
}

unsafe extern "C" fn permission_changed_trampoline<P>(this: *mut ffi::NMClient, permission: libc::c_uint, result: libc::c_uint, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P, u32, u32) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked(), permission, result)
}

unsafe extern "C" fn notify_activating_connection_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_active_connections_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_2", feature = "dox"))]
unsafe extern "C" fn notify_all_devices_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_can_modify_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_connections_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_connectivity_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_devices_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_dns_configuration_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_dns_mode_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
unsafe extern "C" fn notify_dns_rc_manager_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_hostname_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v1_2", feature = "dox"))]
unsafe extern "C" fn notify_metered_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_networking_enabled_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_nm_running_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_primary_connection_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_startup_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_state_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_version_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_wimax_enabled_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_wimax_hardware_enabled_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_wireless_enabled_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_wireless_hardware_enabled_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_wwan_enabled_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_wwan_hardware_enabled_trampoline<P>(this: *mut ffi::NMClient, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Client> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Client::from_glib_borrow(this).downcast_unchecked())
}
